{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/XstateCounter.js",
      "declarations": [
        {
          "kind": "class",
          "description": "![Lit](https://img.shields.io/badge/lit-3.0.0-blue.svg)\n\n> This is an individual repository for the demo included in the Lit controller BlockquoteControllerXstate.\n\n- [You can find this controller in the following monorepo](https://github.com/oscarmarina/blockquote-web-components/tree/main/packages/controllers/blockquote-controller-xstate)\n\n***xstate-counter*** is a Lit component that uses a BlockquoteControllerXstate to connect a XState machine with Lit's reactive property.\n\nThe `BlockquoteControllerXstate` is a Lit Reactive Controller specifically designed for straightforward integration with XState. This controller allows you to subscribe to an XState actor, updating a specified reactive property whenever the state machine transitions.\n\n- [XState 5](https://stately.ai/docs/installation)\n- [Original idea](https://codesandbox.io/s/z3o0s?file=/src/toggleMachine.ts)\n\n<hr>\n\n### Demo\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/oscarmarina/XstateController)\n\n[![Open in Stately.ai](https://img.shields.io/badge/Open%20in%20Stately.ai-black.svg)](https://stately.ai/registry/editor/154a7a42-9338-4cc0-8c0c-131c859d8349)\n\n### Install:\n```bash\nnpm install && npm start\n```\n### Usage\n\n***counterMachine.js***\n\n```javascript\nimport { createMachine, assign } from 'xstate';\n\nconst states = {\n  enabled: 'enabled',\n  disabled: 'disabled',\n};\n\nconst increment = {\n  counter: ({ context }) => context.counter + 1,\n  event: ({ event }) => event,\n};\nconst decrement = {\n  counter: ({ context }) => context.counter - 1,\n  event: ({ event }) => event,\n};\n\nconst isNotMax = ({ context }) => context.counter < 10;\nconst isNotMin = ({ context }) => context.counter > 0;\n\nexport const counterMachine = createMachine(\n  {\n    id: 'counter',\n    context: { counter: 0, event: undefined },\n    initial: 'enabled',\n    states: {\n      enabled: {\n        on: {\n          INC: {\n            actions: {\n              type: 'increment',\n            },\n            guard: {\n              type: 'isNotMax',\n            },\n          },\n          DEC: {\n            actions: {\n              type: 'decrement',\n            },\n            guard: {\n              type: 'isNotMin',\n            },\n          },\n          TOGGLE: {\n            target: states.disabled,\n          },\n        },\n      },\n      disabled: {\n        on: {\n          TOGGLE: {\n            target: states.enabled,\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      increment: assign(increment),\n      decrement: assign(decrement),\n    },\n    guards: {\n      isNotMax,\n      isNotMin,\n    },\n  },\n);\n```\n\n***xstate-counter.js***\n\n```javascript\nimport { html, LitElement } from 'lit';\nimport { BlockquoteControllerXstate } from '@blockquote-web-components/blockquote-controller-xstate';\nimport { counterMachine } from './counterMachine.js';\n\nexport class XstateCounter extends LitElement {\n  static properties = {\n    _xstate: {\n      type: Object,\n      state: true,\n    },\n  };\n\n  constructor() {\n    super();\n    this._xstate = {};\n    this.counterController = new BlockquoteControllerXstate(this, counterMachine, '_xstate');\n  }\n\n  updated(props) {\n    super.updated && super.updated(props);\n    if (props.has('_xstate')) {\n      const { context, value } = this._xstate;\n      const counterEvent = new CustomEvent('counterchange', {\n        bubbles: true,\n        detail: { ...context, value },\n      });\n      this.dispatchEvent(counterEvent);\n    }\n  }\n\n  // ...\n\n  get #disabled() {\n    return this.counterController.state.matches('disabled');\n  }\n\n  render() {\n    return html`\n      <button\n        ?disabled=\"${this.#disabled}\"\n        data-counter=\"increment\"\n        \\@click=${() => this.counterController.send({ type: 'INC' })}\n      >\n        Increment\n      </button>\n      <button\n        ?disabled=\"${this.#disabled}\"\n        data-counter=\"decrement\"\n        \\@click=${() => this.counterController.send({ type: 'DEC' })}\n      >\n        Decrement\n      </button>\n    `;\n  }\n\n  // ...\n}\n```\n\n**Scaffold generated using**:\n\n> [npm init @blockquote/wc](https://github.com/oscarmarina/create-wc)\n\n<hr>",
          "name": "XstateCounter",
          "members": [
            {
              "kind": "field",
              "name": "#disabled",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_xstate",
              "privacy": "public",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "attribute": "_xstate"
            },
            {
              "kind": "field",
              "name": "counterController",
              "default": "new BlockquoteControllerXstate(this, counterMachine, '_xstate')"
            }
          ],
          "attributes": [
            {
              "name": "_xstate",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "fieldName": "_xstate"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "xstate-counter",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "XstateCounter",
          "declaration": {
            "name": "XstateCounter",
            "module": "src/XstateCounter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/counterMachine.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "counterMachine"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "counterMachine",
          "declaration": {
            "name": "counterMachine",
            "module": "src/counterMachine.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/xstate-counter-styles.css.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`:host {\n  --_mark-color: rgb(197, 197, 197);\n  display: block;\n  box-sizing: border-box;\n}\n\n:host([hidden]),\n[hidden] {\n  display: none !important;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n[aria-disabled=true] {\n  opacity: 0.5;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  pointer-events: none;\n  cursor: default;\n}\n\np {\n  font-size: 1.5rem;\n  min-width: 4.25rem;\n  text-align: center;\n  margin: auto;\n  padding: 0.8333em;\n  background-color: var(--_mark-color);\n}\n\nbutton {\n  display: inline-block;\n  min-width: 9.375rem;\n  font: inherit;\n  cursor: pointer;\n  white-space: nowrap;\n  border: none;\n  color: rgb(245, 245, 245);\n  background-color: rgb(51, 65, 85);\n  padding: 0.75em;\n}\nbutton:first-child:not(:only-child) {\n  margin-bottom: 1rem;\n}\n\ndiv {\n  display: flex;\n  align-items: center;\n  max-width: 25rem;\n  padding: 1em 2em;\n  margin: auto;\n  background-color: rgb(238, 238, 238);\n  border: 0.0625rem solid var(--_mark-color);\n  border-bottom: none;\n}\ndiv + div {\n  border-top: 0.0625rem dashed var(--_mark-color);\n  border-bottom: 0.0625rem solid var(--_mark-color);\n}\n\nspan {\n  display: flex;\n  flex-direction: column;\n  margin-right: 2rem;\n}\n\n::slotted(*) {\n  white-space: nowrap;\n}`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "src/styles/xstate-counter-styles.css.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "define/xstate-counter.js",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "xstate-counter",
          "declaration": {
            "name": "XstateCounter",
            "module": "/src/XstateCounter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "XstateCounter",
          "declaration": {
            "name": "XstateCounter",
            "module": "./src/XstateCounter.js"
          }
        }
      ]
    }
  ]
}
